
Communication Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  0080200a  0080200a  000006f8  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ceb  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000036a  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005bb  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003bc  00000000  00000000  000035f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000105c  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b92  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0000559a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_77>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea e5       	ldi	r30, 0x5A	; 90
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 30       	cpi	r26, 0x0A	; 10
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	aa e0       	ldi	r26, 0x0A	; 10
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a6 3f       	cpi	r26, 0xF6	; 246
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 22 03 	call	0x644	; 0x644 <main>
 23c:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 244:	af 92       	push	r10
 246:	cf 92       	push	r12
 248:	ef 92       	push	r14
 24a:	0f 93       	push	r16
 24c:	fc 01       	movw	r30, r24
	spi->module         = module;
 24e:	60 83       	st	Z, r22
 250:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 252:	42 83       	std	Z+2, r20	; 0x02
 254:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 256:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 258:	cc 20       	and	r12, r12
 25a:	11 f0       	breq	.+4      	; 0x260 <SPI_MasterInit+0x1c>
 25c:	90 e8       	ldi	r25, 0x80	; 128
 25e:	01 c0       	rjmp	.+2      	; 0x262 <SPI_MasterInit+0x1e>
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	22 23       	and	r18, r18
 264:	11 f0       	breq	.+4      	; 0x26a <SPI_MasterInit+0x26>
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	01 c0       	rjmp	.+2      	; 0x26c <SPI_MasterInit+0x28>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	00 65       	ori	r16, 0x50	; 80
 26e:	0a 29       	or	r16, r10
 270:	09 2b       	or	r16, r25
 272:	08 2b       	or	r16, r24
 274:	db 01       	movw	r26, r22
 276:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 278:	a0 81       	ld	r26, Z
 27a:	b1 81       	ldd	r27, Z+1	; 0x01
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 280:	15 82       	std	Z+5, r1	; 0x05
 282:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 284:	02 80       	ldd	r0, Z+2	; 0x02
 286:	f3 81       	ldd	r31, Z+3	; 0x03
 288:	e0 2d       	mov	r30, r0
 28a:	80 ea       	ldi	r24, 0xA0	; 160
 28c:	81 83       	std	Z+1, r24	; 0x01
}
 28e:	0f 91       	pop	r16
 290:	ef 90       	pop	r14
 292:	cf 90       	pop	r12
 294:	af 90       	pop	r10
 296:	08 95       	ret

00000298 <spi_set_up>:
	PF6	MISO
	PF7	SCK
*/
	
void spi_set_up()
{
 298:	af 92       	push	r10
 29a:	cf 92       	push	r12
 29c:	ef 92       	push	r14
 29e:	0f 93       	push	r16
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
 2a4:	e0 ea       	ldi	r30, 0xA0	; 160
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	c0 e1       	ldi	r28, 0x10	; 16
 2aa:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 2ac:	d8 e3       	ldi	r29, 0x38	; 56
 2ae:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 2b0:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f3 e0       	ldi	r31, 0x03	; 3
 2b6:	af 2e       	mov	r10, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	c1 2c       	mov	r12, r1
 2bc:	e1 2c       	mov	r14, r1
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	40 ea       	ldi	r20, 0xA0	; 160
 2c4:	56 e0       	ldi	r21, 0x06	; 6
 2c6:	60 ec       	ldi	r22, 0xC0	; 192
 2c8:	7b e0       	ldi	r23, 0x0B	; 11
 2ca:	8e e0       	ldi	r24, 0x0E	; 14
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	0e 94 22 01 	call	0x244	; 0x244 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 2d2:	e0 ec       	ldi	r30, 0xC0	; 192
 2d4:	fb e0       	ldi	r31, 0x0B	; 11
 2d6:	13 82       	std	Z+3, r1	; 0x03
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 2d8:	e0 e8       	ldi	r30, 0x80	; 128
 2da:	f6 e0       	ldi	r31, 0x06	; 6
 2dc:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 2de:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 2e0:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 2e2:	68 94       	set
 2e4:	aa 24       	eor	r10, r10
 2e6:	a1 f8       	bld	r10, 1
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	56 e0       	ldi	r21, 0x06	; 6
 2ee:	60 ec       	ldi	r22, 0xC0	; 192
 2f0:	7a e0       	ldi	r23, 0x0A	; 10
 2f2:	87 eb       	ldi	r24, 0xB7	; 183
 2f4:	90 e2       	ldi	r25, 0x20	; 32
 2f6:	0e 94 22 01 	call	0x244	; 0x244 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler
		
		SPIE.DATA = 0x00;						// init SPI data register
 2fa:	e0 ec       	ldi	r30, 0xC0	; 192
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	13 82       	std	Z+3, r1	; 0x03

}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	0f 91       	pop	r16
 306:	ef 90       	pop	r14
 308:	cf 90       	pop	r12
 30a:	af 90       	pop	r10
 30c:	08 95       	ret

0000030e <spiIMU_write_read>:
// Load the register, this will start a transfer on MOSI
//  Wait until the intruders flag is set
//  read the data from the data register, this was on MISO
unsigned char spiIMU_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	fb e0       	ldi	r31, 0x0B	; 11
 312:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 314:	82 81       	ldd	r24, Z+2	; 0x02
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <spiIMU_write_read+0x6>
	return SPIF.DATA;
 31a:	e0 ec       	ldi	r30, 0xC0	; 192
 31c:	fb e0       	ldi	r31, 0x0B	; 11
 31e:	83 81       	ldd	r24, Z+3	; 0x03
}
 320:	08 95       	ret

00000322 <spiPC_write_read>:
// Load the register, this will start a transfer on MOSI
//  Wait until the interrupt flag is set
//  read the data from the data register, this was on MISO
unsigned char spiPC_write_read(unsigned char spi_data1)
{
	SPIE.DATA = spi_data1;
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	fa e0       	ldi	r31, 0x0A	; 10
 326:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 328:	82 81       	ldd	r24, Z+2	; 0x02
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <spiPC_write_read+0x6>
	return SPIE.DATA;
 32e:	e0 ec       	ldi	r30, 0xC0	; 192
 330:	fa e0       	ldi	r31, 0x0A	; 10
 332:	83 81       	ldd	r24, Z+3	; 0x03
}
 334:	08 95       	ret

00000336 <WriteToPC_SPI>:
}


// transact PC data
void WriteToPC_SPI()
{
 336:	bf 92       	push	r11
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 348:	0f 2e       	mov	r0, r31
 34a:	f0 e8       	ldi	r31, 0x80	; 128
 34c:	ef 2e       	mov	r14, r31
 34e:	f6 e0       	ldi	r31, 0x06	; 6
 350:	ff 2e       	mov	r15, r31
 352:	f0 2d       	mov	r31, r0
 354:	68 94       	set
 356:	bb 24       	eor	r11, r11
 358:	b4 f8       	bld	r11, 4
 35a:	f7 01       	movw	r30, r14
 35c:	b6 82       	std	Z+6, r11	; 0x06

	uint8_t dummy_read;

	dummy_read = spiPC_write_read(START_PACKET_CHAR);
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
	dummy_read = spiPC_write_read(START_PACKET_CHAR);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;
 36a:	07 ea       	ldi	r16, 0xA7	; 167
 36c:	10 e2       	ldi	r17, 0x20	; 32
 36e:	f8 01       	movw	r30, r16
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 376:	d8 2f       	mov	r29, r24
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	cf 2f       	mov	r28, r31
 37c:	f8 01       	movw	r30, r16
 37e:	c0 83       	st	Z, r28
 380:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 388:	c8 0f       	add	r28, r24
 38a:	d1 1d       	adc	r29, r1
 38c:	f8 01       	movw	r30, r16
 38e:	c0 83       	st	Z, r28
 390:	d1 83       	std	Z+1, r29	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 392:	0f 2e       	mov	r0, r31
 394:	f3 e2       	ldi	r31, 0x23	; 35
 396:	cf 2e       	mov	r12, r31
 398:	f0 e2       	ldi	r31, 0x20	; 32
 39a:	df 2e       	mov	r13, r31
 39c:	f0 2d       	mov	r31, r0
 39e:	f6 01       	movw	r30, r12
 3a0:	81 81       	ldd	r24, Z+1	; 0x01
 3a2:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 3a6:	d8 2f       	mov	r29, r24
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	cf 2f       	mov	r28, r31
 3ac:	07 e2       	ldi	r16, 0x27	; 39
 3ae:	10 e2       	ldi	r17, 0x20	; 32
 3b0:	f8 01       	movw	r30, r16
 3b2:	c0 83       	st	Z, r28
 3b4:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 3b6:	f6 01       	movw	r30, r12
 3b8:	80 81       	ld	r24, Z
 3ba:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 3be:	c8 0f       	add	r28, r24
 3c0:	d1 1d       	adc	r29, r1
 3c2:	f8 01       	movw	r30, r16
 3c4:	c0 83       	st	Z, r28
 3c6:	d1 83       	std	Z+1, r29	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f5 e5       	ldi	r31, 0x55	; 85
 3cc:	cf 2e       	mov	r12, r31
 3ce:	f0 e2       	ldi	r31, 0x20	; 32
 3d0:	df 2e       	mov	r13, r31
 3d2:	f0 2d       	mov	r31, r0
 3d4:	f6 01       	movw	r30, r12
 3d6:	81 81       	ldd	r24, Z+1	; 0x01
 3d8:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 3dc:	d8 2f       	mov	r29, r24
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	cf 2f       	mov	r28, r31
 3e2:	09 e5       	ldi	r16, 0x59	; 89
 3e4:	10 e2       	ldi	r17, 0x20	; 32
 3e6:	f8 01       	movw	r30, r16
 3e8:	c0 83       	st	Z, r28
 3ea:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 3ec:	f6 01       	movw	r30, r12
 3ee:	80 81       	ld	r24, Z
 3f0:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 3f4:	c8 0f       	add	r28, r24
 3f6:	d1 1d       	adc	r29, r1
 3f8:	f8 01       	movw	r30, r16
 3fa:	c0 83       	st	Z, r28
 3fc:	d1 83       	std	Z+1, r29	; 0x01
	
	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 3fe:	0f 2e       	mov	r0, r31
 400:	fc ec       	ldi	r31, 0xCC	; 204
 402:	cf 2e       	mov	r12, r31
 404:	f0 e2       	ldi	r31, 0x20	; 32
 406:	df 2e       	mov	r13, r31
 408:	f0 2d       	mov	r31, r0
 40a:	f6 01       	movw	r30, r12
 40c:	81 81       	ldd	r24, Z+1	; 0x01
 40e:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 412:	d8 2f       	mov	r29, r24
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	cf 2f       	mov	r28, r31
 418:	00 ed       	ldi	r16, 0xD0	; 208
 41a:	10 e2       	ldi	r17, 0x20	; 32
 41c:	f8 01       	movw	r30, r16
 41e:	c0 83       	st	Z, r28
 420:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 422:	f6 01       	movw	r30, r12
 424:	80 81       	ld	r24, Z
 426:	0e 94 91 01 	call	0x322	; 0x322 <spiPC_write_read>
 42a:	c8 0f       	add	r28, r24
 42c:	d1 1d       	adc	r29, r1
 42e:	f8 01       	movw	r30, r16
 430:	c0 83       	st	Z, r28
 432:	d1 83       	std	Z+1, r29	; 0x01

	PORTE.OUTSET = PIN4_bm;
 434:	f7 01       	movw	r30, r14
 436:	b5 82       	std	Z+5, r11	; 0x05
	//PORTA.OUTTGL = 0x00000001;
	
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	bf 90       	pop	r11
 44a:	08 95       	ret

0000044c <UpdateEulerAngles>:
//  Read in data from the IMU.  Most of the IMU data are 16 bits sotred in 32 bit registers, see
//  data sheet for read commands.
//  
//***********************************************************************************************************
void UpdateEulerAngles()
{
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 454:	c0 ea       	ldi	r28, 0xA0	; 160
 456:	d6 e0       	ldi	r29, 0x06	; 6
 458:	10 e1       	ldi	r17, 0x10	; 16
 45a:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spiIMU_write_read(READ_COMMAND);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 462:	82 e6       	ldi	r24, 0x62	; 98
 464:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 46e:	08 2f       	mov	r16, r24
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 476:	30 2f       	mov	r19, r16
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	28 2b       	or	r18, r24
 47c:	20 93 23 20 	sts	0x2023, r18
 480:	30 93 24 20 	sts	0x2024, r19

	pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 48a:	08 2f       	mov	r16, r24
 48c:	83 e6       	ldi	r24, 0x63	; 99
 48e:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 492:	30 2f       	mov	r19, r16
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	28 2b       	or	r18, r24
 498:	20 93 55 20 	sts	0x2055, r18
 49c:	30 93 56 20 	sts	0x2056, r19
	
	yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 4a6:	08 2f       	mov	r16, r24
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
 4ae:	30 2f       	mov	r19, r16
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	28 2b       	or	r18, r24
 4b4:	20 93 cc 20 	sts	0x20CC, r18
 4b8:	30 93 cd 20 	sts	0x20CD, r19

	dummy_read = spiIMU_write_read(DUMMY_READ);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>
	dummy_read =  spiIMU_write_read(DUMMY_READ);
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 87 01 	call	0x30e	; 0x30e <spiIMU_write_read>

	PORTF.OUTSET = PIN4_bm;
 4c8:	1d 83       	std	Y+5, r17	; 0x05

}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 4d4:	e0 eb       	ldi	r30, 0xB0	; 176
 4d6:	f9 e0       	ldi	r31, 0x09	; 9
 4d8:	91 81       	ldd	r25, Z+1	; 0x01
 4da:	95 ff       	sbrs	r25, 5
 4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 4de:	80 93 b0 09 	sts	0x09B0, r24
 4e2:	08 95       	ret

000004e4 <sendData_int16_t>:



//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 4ea:	8d 2f       	mov	r24, r29
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 4f2:	ce 01       	movw	r24, r28
 4f4:	99 27       	eor	r25, r25
 4f6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <put_USART_PC_char>
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <sendUM6_Data>:



void sendUM6_Data()
{
	sendData_int16_t(0xFFFF);
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sendData_int16_t>

	sendData_int16_t(throttleAxis.thrust);
 508:	80 91 a7 20 	lds	r24, 0x20A7
 50c:	90 91 a8 20 	lds	r25, 0x20A8
 510:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sendData_int16_t>
	sendData_int16_t(rollAxis.attitude_command);
 514:	80 91 27 20 	lds	r24, 0x2027
 518:	90 91 28 20 	lds	r25, 0x2028
 51c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sendData_int16_t>
	sendData_int16_t(pitchAxis.attitude_command);
 520:	80 91 59 20 	lds	r24, 0x2059
 524:	90 91 5a 20 	lds	r25, 0x205A
 528:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sendData_int16_t>
	sendData_int16_t(yawAxis.attitude_command);
 52c:	80 91 d0 20 	lds	r24, 0x20D0
 530:	90 91 d1 20 	lds	r25, 0x20D1
 534:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sendData_int16_t>
 538:	08 95       	ret

0000053a <ControlLoop>:


//  runs on interrupt every 3.5mSec,250Hz
void ControlLoop()
{
	UpdateEulerAngles();
 53a:	0e 94 26 02 	call	0x44c	; 0x44c <UpdateEulerAngles>
	int16counter++;
 53e:	80 91 f0 20 	lds	r24, 0x20F0
 542:	90 91 f1 20 	lds	r25, 0x20F1
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	80 93 f0 20 	sts	0x20F0, r24
 54c:	90 93 f1 20 	sts	0x20F1, r25
	if (int16counter >= 30)						//
 550:	4e 97       	sbiw	r24, 0x1e	; 30
 552:	44 f0       	brlt	.+16     	; 0x564 <ControlLoop+0x2a>
	{
		WriteToPC_SPI();
 554:	0e 94 9b 01 	call	0x336	; 0x336 <WriteToPC_SPI>
		sendUM6_Data();
 558:	0e 94 80 02 	call	0x500	; 0x500 <sendUM6_Data>
		int16counter = 0;
 55c:	10 92 f0 20 	sts	0x20F0, r1
 560:	10 92 f1 20 	sts	0x20F1, r1
 564:	08 95       	ret

00000566 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 566:	e0 e6       	ldi	r30, 0x60	; 96
 568:	f6 e0       	ldi	r31, 0x06	; 6
 56a:	90 e4       	ldi	r25, 0x40	; 64
 56c:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 572:	e0 e4       	ldi	r30, 0x40	; 64
 574:	f6 e0       	ldi	r31, 0x06	; 6
 576:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 578:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 57a:	e0 eb       	ldi	r30, 0xB0	; 176
 57c:	f9 e0       	ldi	r31, 0x09	; 9
 57e:	8b e0       	ldi	r24, 0x0B	; 11
 580:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 582:	87 e1       	ldi	r24, 0x17	; 23
 584:	86 83       	std	Z+6, r24	; 0x06
 586:	84 ea       	ldi	r24, 0xA4	; 164
 588:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 58a:	84 81       	ldd	r24, Z+4	; 0x04
 58c:	80 61       	ori	r24, 0x10	; 16
 58e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 590:	84 81       	ldd	r24, Z+4	; 0x04
 592:	88 60       	ori	r24, 0x08	; 8
 594:	84 83       	std	Z+4, r24	; 0x04
 596:	08 95       	ret

00000598 <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer to run at the fastest rate.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 598:	e0 e0       	ldi	r30, 0x00	; 0
 59a:	f9 e0       	ldi	r31, 0x09	; 9
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 5a0:	11 82       	std	Z+1, r1	; 0x01

	// At 32 MHz/DIV_4 = 8Mhz,  65353 - (8,000,000 * .0035Sec) = 37535
	TCD0.PER = 37535;
 5a2:	8f e9       	ldi	r24, 0x9F	; 159
 5a4:	92 e9       	ldi	r25, 0x92	; 146
 5a6:	86 a3       	std	Z+38, r24	; 0x26
 5a8:	97 a3       	std	Z+39, r25	; 0x27

	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 5ae:	e0 ea       	ldi	r30, 0xA0	; 160
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	82 81       	ldd	r24, Z+2	; 0x02
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	82 83       	std	Z+2, r24	; 0x02
 5b8:	08 95       	ret

000005ba <__vector_77>:


// switch  to clock divisor = 4, so  32Mhz / 250Hz = 32000 ticks
/* Function to handle timer overflowing. */
ISR(TCD0_OVF_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	08 b6       	in	r0, 0x38	; 56
 5c6:	0f 92       	push	r0
 5c8:	18 be       	out	0x38, r1	; 56
 5ca:	09 b6       	in	r0, 0x39	; 57
 5cc:	0f 92       	push	r0
 5ce:	19 be       	out	0x39, r1	; 57
 5d0:	0b b6       	in	r0, 0x3b	; 59
 5d2:	0f 92       	push	r0
 5d4:	1b be       	out	0x3b, r1	; 59
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	ControlLoop();
 5ee:	0e 94 9d 02 	call	0x53a	; 0x53a <ControlLoop>
	TCD0.CNT = 0;
 5f2:	e0 e0       	ldi	r30, 0x00	; 0
 5f4:	f9 e0       	ldi	r31, 0x09	; 9
 5f6:	10 a2       	std	Z+32, r1	; 0x20
 5f8:	11 a2       	std	Z+33, r1	; 0x21
	
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0b be       	out	0x3b, r0	; 59
 616:	0f 90       	pop	r0
 618:	09 be       	out	0x39, r0	; 57
 61a:	0f 90       	pop	r0
 61c:	08 be       	out	0x38, r0	; 56
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <init32MHzClock>:

void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 628:	e0 e5       	ldi	r30, 0x50	; 80
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	82 60       	ori	r24, 0x02	; 2
 630:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 632:	81 81       	ldd	r24, Z+1	; 0x01
 634:	81 ff       	sbrs	r24, 1
 636:	fd cf       	rjmp	.-6      	; 0x632 <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 638:	88 ed       	ldi	r24, 0xD8	; 216
 63a:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 40 00 	sts	0x0040, r24
 642:	08 95       	ret

00000644 <main>:

int main(void)
{
	
	
	init32MHzClock();
 644:	0e 94 14 03 	call	0x628	; 0x628 <init32MHzClock>
	initUART();
 648:	0e 94 b3 02 	call	0x566	; 0x566 <initUART>
	spi_set_up();
 64c:	0e 94 4c 01 	call	0x298	; 0x298 <spi_set_up>
	intiLoopTimer();
 650:	0e 94 cc 02 	call	0x598	; 0x598 <intiLoopTimer>
 654:	ff cf       	rjmp	.-2      	; 0x654 <main+0x10>

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
