
UM6_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  0000089c  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000eb  00802008  00802008  00000938  2**0
                  ALLOC
  3 .stab         0000075c  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000129  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a8  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000371a  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004df  00000000  00000000  00004bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b32  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006ec  00000000  00000000  00005bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000275a  00000000  00000000  000062ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a9c  00000000  00000000  00008a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000280  00000000  00000000  0000a4a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e9       	ldi	r30, 0x9C	; 156
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	a8 e0       	ldi	r26, 0x08	; 8
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a3 3f       	cpi	r26, 0xF3	; 243
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 05 04 	call	0x80a	; 0x80a <main>
 23c:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <pid_attitude>:
		acc = Uint16_MAX;
		errno = ERANGE;
	} else if (neg)
	acc = -acc;
	if (endptr != 0)
	*endptr = (char *) (any ? s - 1 : nptr);
 244:	fc 01       	movw	r30, r24
 246:	80 89       	ldd	r24, Z+16	; 0x10
 248:	91 89       	ldd	r25, Z+17	; 0x11
 24a:	24 85       	ldd	r18, Z+12	; 0x0c
 24c:	35 85       	ldd	r19, Z+13	; 0x0d
 24e:	82 1b       	sub	r24, r18
 250:	93 0b       	sbc	r25, r19
 252:	86 8b       	std	Z+22, r24	; 0x16
 254:	97 8b       	std	Z+23, r25	; 0x17
	return (acc);
 256:	46 81       	ldd	r20, Z+6	; 0x06
 258:	57 81       	ldd	r21, Z+7	; 0x07
 25a:	84 9f       	mul	r24, r20
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
	c = *s++;
	if ((base == 0 || base == 16) &&
 25c:	90 01       	movw	r18, r0
 25e:	85 9f       	mul	r24, r21
 260:	30 0d       	add	r19, r0
 262:	94 9f       	mul	r25, r20
 264:	30 0d       	add	r19, r0
 266:	11 24       	eor	r1, r1
 268:	20 93 b7 20 	sts	0x20B7, r18
 26c:	30 93 b8 20 	sts	0x20B8, r19
 270:	66 85       	ldd	r22, Z+14	; 0x0e
 272:	77 85       	ldd	r23, Z+15	; 0x0f
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
	base = c == '0' ? 8 : 10;
 274:	42 85       	ldd	r20, Z+10	; 0x0a
 276:	53 85       	ldd	r21, Z+11	; 0x0b
 278:	64 9f       	mul	r22, r20
 27a:	c0 01       	movw	r24, r0
 27c:	65 9f       	mul	r22, r21
 27e:	90 0d       	add	r25, r0
	} else if (neg)
	acc = -acc;
	if (endptr != 0)
	*endptr = (char *) (any ? s - 1 : nptr);
	return (acc);
}
 280:	74 9f       	mul	r23, r20
 282:	90 0d       	add	r25, r0
 284:	11 24       	eor	r1, r1
 286:	80 93 bd 20 	sts	0x20BD, r24
 28a:	90 93 be 20 	sts	0x20BE, r25
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	80 93 29 20 	sts	0x2029, r24
 296:	90 93 2a 20 	sts	0x202A, r25
 29a:	82 8b       	std	Z+18, r24	; 0x12
 29c:	93 8b       	std	Z+19, r25	; 0x13
 29e:	08 95       	ret

000002a0 <SPI_MasterInit>:
 2a0:	af 92       	push	r10
 2a2:	cf 92       	push	r12
 2a4:	ef 92       	push	r14
 2a6:	0f 93       	push	r16
 2a8:	fc 01       	movw	r30, r24
 2aa:	60 83       	st	Z, r22
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
	spi->module         = module;
 2ac:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 2ae:	42 83       	std	Z+2, r20	; 0x02
 2b0:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 2b2:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 2b4:	cc 20       	and	r12, r12
 2b6:	11 f0       	breq	.+4      	; 0x2bc <SPI_MasterInit+0x1c>
 2b8:	90 e8       	ldi	r25, 0x80	; 128
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <SPI_MasterInit+0x1e>
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	22 23       	and	r18, r18
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <SPI_MasterInit+0x26>
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <SPI_MasterInit+0x28>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	00 65       	ori	r16, 0x50	; 80
 2ca:	0a 29       	or	r16, r10
 2cc:	09 2b       	or	r16, r25
 2ce:	08 2b       	or	r16, r24
 2d0:	db 01       	movw	r26, r22
 2d2:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 2d4:	a0 81       	ld	r26, Z
 2d6:	b1 81       	ldd	r27, Z+1	; 0x01
 2d8:	11 96       	adiw	r26, 0x01	; 1
 2da:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 2dc:	15 82       	std	Z+5, r1	; 0x05
 2de:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 2e0:	02 80       	ldd	r0, Z+2	; 0x02
 2e2:	f3 81       	ldd	r31, Z+3	; 0x03
 2e4:	e0 2d       	mov	r30, r0
 2e6:	80 ea       	ldi	r24, 0xA0	; 160
 2e8:	81 83       	std	Z+1, r24	; 0x01
}
 2ea:	0f 91       	pop	r16
 2ec:	ef 90       	pop	r14
 2ee:	cf 90       	pop	r12
 2f0:	af 90       	pop	r10
 2f2:	08 95       	ret

000002f4 <spi_set_up>:
	PF6	MISO
	PF7	SCK
*/
	
void spi_set_up()
{
 2f4:	af 92       	push	r10
 2f6:	cf 92       	push	r12
 2f8:	ef 92       	push	r14
 2fa:	0f 93       	push	r16
	
	/* Init SS pin as output with wired AND and pull-up. */
	PORTF.DIRSET = PIN4_bm;
 2fc:	e0 ea       	ldi	r30, 0xA0	; 160
 2fe:	f6 e0       	ldi	r31, 0x06	; 6
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 304:	98 e3       	ldi	r25, 0x38	; 56
 306:	94 8b       	std	Z+20, r25	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 308:	85 83       	std	Z+5, r24	; 0x05

	/* Initialize SPI master on port C. */
	SPI_MasterInit(&spiMasterF,
 30a:	0f 2e       	mov	r0, r31
 30c:	f3 e0       	ldi	r31, 0x03	; 3
 30e:	af 2e       	mov	r10, r31
 310:	f0 2d       	mov	r31, r0
 312:	c1 2c       	mov	r12, r1
 314:	e1 2c       	mov	r14, r1
 316:	00 e0       	ldi	r16, 0x00	; 0
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	40 ea       	ldi	r20, 0xA0	; 160
 31c:	56 e0       	ldi	r21, 0x06	; 6
 31e:	60 ec       	ldi	r22, 0xC0	; 192
 320:	7b e0       	ldi	r23, 0x0B	; 11
 322:	82 e2       	ldi	r24, 0x22	; 34
 324:	90 e2       	ldi	r25, 0x20	; 32
 326:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

}
 32a:	0f 91       	pop	r16
 32c:	ef 90       	pop	r14
 32e:	cf 90       	pop	r12
 330:	af 90       	pop	r10
 332:	08 95       	ret

00000334 <spi_write_read>:
// Load the register, this will start a transfer on MOSI
//  Wait until the intrupt flag is set
//  read the data from the data register, this was on MISO
unsigned char spi_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 334:	e0 ec       	ldi	r30, 0xC0	; 192
 336:	fb e0       	ldi	r31, 0x0B	; 11
 338:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 33a:	82 81       	ldd	r24, Z+2	; 0x02
 33c:	88 23       	and	r24, r24
 33e:	ec f7       	brge	.-6      	; 0x33a <spi_write_read+0x6>
	return SPIF.DATA;
 340:	e0 ec       	ldi	r30, 0xC0	; 192
 342:	fb e0       	ldi	r31, 0x0B	; 11
 344:	83 81       	ldd	r24, Z+3	; 0x03
}
 346:	08 95       	ret

00000348 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 348:	fc 01       	movw	r30, r24
 34a:	20 81       	ld	r18, Z
 34c:	20 7f       	andi	r18, 0xF0	; 240
 34e:	62 2b       	or	r22, r18
 350:	60 83       	st	Z, r22
 352:	08 95       	ret

00000354 <initPWM>:
    //int16_t pwm_delta = 300;

    // Add code to select a Single Slope PWM as Waveform Generation mode. 
    // This is done by setting the WGM bits,in the CTRLB register for the TC.
	
	MOTOR_PMW_TIMER0.CTRLA = TC_WGMODE_SS_gc;
 354:	e0 e0       	ldi	r30, 0x00	; 0
 356:	f8 e0       	ldi	r31, 0x08	; 8
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	80 83       	st	Z, r24
	MOTOR_PMW_TIMER0.CTRLB = TC_WGMODE_SS_gc;
 35c:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLC = TC_WGMODE_SS_gc;
 35e:	82 83       	std	Z+2, r24	; 0x02
	MOTOR_PMW_TIMER0.CTRLD = TC_WGMODE_SS_gc;
 360:	83 83       	std	Z+3, r24	; 0x03

    /* Add code to enable the CC channels we wish to use. Each channel must be separately enabled
    * by setting the corresponding CCxEN bits in the CTRLB register for the TC.
    * Code for enabling CCA is already added, but add code to enable CCB, CCC and CCD */
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCAEN_bm;
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	80 61       	ori	r24, 0x10	; 16
 366:	81 83       	std	Z+1, r24	; 0x01
    MOTOR_PMW_TIMER0.CTRLB |= TC0_CCBEN_bm;
 368:	81 81       	ldd	r24, Z+1	; 0x01
 36a:	80 62       	ori	r24, 0x20	; 32
 36c:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCCEN_bm;
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	80 64       	ori	r24, 0x40	; 64
 372:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCDEN_bm;
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	80 68       	ori	r24, 0x80	; 128
 378:	81 83       	std	Z+1, r24	; 0x01

    /* The corresponding port pins MUST be output for the Waveform to be visible
    * on the pin. For TCE0 the corresponding port is PORTE, and pin 0 to 3 for
    * CC channel A to D */

    MOTOR_PORT.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
 37a:	8f e0       	ldi	r24, 0x0F	; 15
 37c:	a0 e4       	ldi	r26, 0x40	; 64
 37e:	b6 e0       	ldi	r27, 0x06	; 6
 380:	11 96       	adiw	r26, 0x01	; 1
 382:	8c 93       	st	X, r24
    * The compare value decide the PWM duty cycle for the waveform.
    * 
    * Code for CC channel A is added, add code for channel B, C, and D
    * with the compare value 3000 */

    TC_SetCompareA(&MOTOR_PMW_TIMER0, 0);
 384:	10 ae       	std	Z+56, r1	; 0x38
 386:	11 ae       	std	Z+57, r1	; 0x39
	TC_SetCompareB(&MOTOR_PMW_TIMER0, 0);
 388:	12 ae       	std	Z+58, r1	; 0x3a
 38a:	13 ae       	std	Z+59, r1	; 0x3b
	TC_SetCompareC(&MOTOR_PMW_TIMER0, 0);
 38c:	14 ae       	std	Z+60, r1	; 0x3c
 38e:	15 ae       	std	Z+61, r1	; 0x3d
	TC_SetCompareD(&MOTOR_PMW_TIMER0, 0);
 390:	10 92 3e 08 	sts	0x083E, r1
 394:	10 92 3f 08 	sts	0x083F, r1
    /* Using the TC_driver we set the Period and 
    * start the timer with  pre-scaling */
	// set PWM frequency at 300Hz with clock division = 4.  1/(300Hz / (32MHz /4)) - 1 = 26665      Period = 3.333 mSec
	 // 1mSec = 8000 = Off
	 // 2mSec =  = 15999 = ON
    TC_SetPeriod(&MOTOR_PMW_TIMER0, 26665);
 398:	89 e2       	ldi	r24, 0x29	; 41
 39a:	98 e6       	ldi	r25, 0x68	; 104
 39c:	86 a3       	std	Z+38, r24	; 0x26
 39e:	97 a3       	std	Z+39, r25	; 0x27
    TC0_ConfigClockSource(&MOTOR_PMW_TIMER0, TC_CLKSEL_DIV4_gc);
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	98 e0       	ldi	r25, 0x08	; 8
 3a6:	0e 94 a4 01 	call	0x348	; 0x348 <TC0_ConfigClockSource>
 3aa:	08 95       	ret

000003ac <doPWM>:
         * CC channels */

        /* Check if overflow flag (OVFIF) is set,
         * clear flag and set a new duty cycle
         */
        if(TC_GetOverflowFlag(&MOTOR_PMW_TIMER0) != 0) 
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f8 e0       	ldi	r31, 0x08	; 8
 3b0:	e4 85       	ldd	r30, Z+12	; 0x0c
 3b2:	e0 ff       	sbrs	r30, 0
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <doPWM+0x26>
        {
            TC_ClearOverflowFlag(&MOTOR_PMW_TIMER0);      //Clear the IF by writing a logical 1 to the flag
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f8 e0       	ldi	r31, 0x08	; 8
 3ba:	a1 e0       	ldi	r26, 0x01	; 1
 3bc:	a4 87       	std	Z+12, r26	; 0x0c

            MOTOR_PMW_TIMER0.CCABUF = speed_1; //Change the compare value to change duty cycle
 3be:	80 af       	std	Z+56, r24	; 0x38
 3c0:	91 af       	std	Z+57, r25	; 0x39
			MOTOR_PMW_TIMER0.CCBBUF = speed_2;
 3c2:	62 af       	std	Z+58, r22	; 0x3a
 3c4:	73 af       	std	Z+59, r23	; 0x3b
			MOTOR_PMW_TIMER0.CCCBUF = speed_3;
 3c6:	44 af       	std	Z+60, r20	; 0x3c
 3c8:	55 af       	std	Z+61, r21	; 0x3d
			MOTOR_PMW_TIMER0.CCDBUF = speed_4;
 3ca:	20 93 3e 08 	sts	0x083E, r18
 3ce:	30 93 3f 08 	sts	0x083F, r19
 3d2:	08 95       	ret

000003d4 <DMA_EnableChannel>:
 *
 *  \param  channel  The channel to enable.
 */
void DMA_EnableChannel( volatile DMA_CH_t * channel )
{
	channel->CTRLA |= DMA_CH_ENABLE_bm;
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 81       	ld	r18, Z
 3d8:	20 68       	ori	r18, 0x80	; 128
 3da:	20 83       	st	Z, r18
 3dc:	08 95       	ret

000003de <DMA_SetupBlock>:
                     DMA_CH_DESTDIR_t destDirection,
                     uint16_t blockSize,
                     DMA_CH_BURSTLEN_t burstMode,
                     uint8_t repeatCount,
                     bool useRepeat )
{
 3de:	8f 92       	push	r8
 3e0:	af 92       	push	r10
 3e2:	bf 92       	push	r11
 3e4:	cf 92       	push	r12
 3e6:	ef 92       	push	r14
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	fc 01       	movw	r30, r24
	channel->SRCADDR0 = (( (uint16_t) srcAddr) >> 0*8 ) & 0xFF;
 3f6:	60 87       	std	Z+8, r22	; 0x08
	channel->SRCADDR1 = (( (uint16_t) srcAddr) >> 1*8 ) & 0xFF;
 3f8:	71 87       	std	Z+9, r23	; 0x09
	channel->SRCADDR2 = 0;
 3fa:	12 86       	std	Z+10, r1	; 0x0a

	channel->DESTADDR0 = (( (uint16_t) destAddr) >> 0*8 ) & 0xFF;
 3fc:	04 87       	std	Z+12, r16	; 0x0c
	channel->DESTADDR1 = (( (uint16_t) destAddr) >> 1*8 ) & 0xFF;
 3fe:	15 87       	std	Z+13, r17	; 0x0d
	channel->DESTADDR2 = 0;
 400:	16 86       	std	Z+14, r1	; 0x0e

	channel->ADDRCTRL = (uint8_t) srcReload | srcDirection |
 402:	42 2b       	or	r20, r18
 404:	e4 2a       	or	r14, r20
 406:	ce 28       	or	r12, r14
 408:	c2 82       	std	Z+2, r12	; 0x02
	                              destReload | destDirection;
	channel->TRFCNT = blockSize;
 40a:	a4 82       	std	Z+4, r10	; 0x04
 40c:	b5 82       	std	Z+5, r11	; 0x05
	channel->CTRLA = ( channel->CTRLA & ~( DMA_CH_BURSTLEN_gm | DMA_CH_REPEAT_bm ) ) |
 40e:	80 81       	ld	r24, Z
 410:	8c 7d       	andi	r24, 0xDC	; 220
 412:	88 29       	or	r24, r8
 414:	9e 85       	ldd	r25, Y+14	; 0x0e
 416:	99 23       	and	r25, r25
 418:	29 f0       	breq	.+10     	; 0x424 <DMA_SetupBlock+0x46>
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	80 83       	st	Z, r24
	                  burstMode | ( useRepeat ? DMA_CH_REPEAT_bm : 0);

	if ( useRepeat ) {
		channel->REPCNT = repeatCount;
 41e:	8d 85       	ldd	r24, Y+13	; 0x0d
 420:	86 83       	std	Z+6, r24	; 0x06
 422:	01 c0       	rjmp	.+2      	; 0x426 <DMA_SetupBlock+0x48>
	channel->DESTADDR2 = 0;

	channel->ADDRCTRL = (uint8_t) srcReload | srcDirection |
	                              destReload | destDirection;
	channel->TRFCNT = blockSize;
	channel->CTRLA = ( channel->CTRLA & ~( DMA_CH_BURSTLEN_gm | DMA_CH_REPEAT_bm ) ) |
 424:	80 83       	st	Z, r24
	                  burstMode | ( useRepeat ? DMA_CH_REPEAT_bm : 0);

	if ( useRepeat ) {
		channel->REPCNT = repeatCount;
	}
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ef 90       	pop	r14
 430:	cf 90       	pop	r12
 432:	bf 90       	pop	r11
 434:	af 90       	pop	r10
 436:	8f 90       	pop	r8
 438:	08 95       	ret

0000043a <DMA_EnableSingleShot>:
 *
 *  \param  channel  The channel to configure.
 */
void DMA_EnableSingleShot( volatile DMA_CH_t * channel )
{
	channel->CTRLA |= DMA_CH_SINGLE_bm;
 43a:	fc 01       	movw	r30, r24
 43c:	20 81       	ld	r18, Z
 43e:	24 60       	ori	r18, 0x04	; 4
 440:	20 83       	st	Z, r18
 442:	08 95       	ret

00000444 <DMA_SetTriggerSource>:
 *  \param  channel  The channel to configure.
 *  \param  trigger  The trigger source ID.
 */
void DMA_SetTriggerSource( volatile DMA_CH_t * channel, uint8_t trigger )
{
	channel->TRIGSRC = trigger;
 444:	fc 01       	movw	r30, r24
 446:	63 83       	std	Z+3, r22	; 0x03
 448:	08 95       	ret

0000044a <SetPulseWidths>:


void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.attitude_command > 2000 && throttleAxis.attitude_command <= 4095)
 44a:	80 91 99 20 	lds	r24, 0x2099
 44e:	90 91 9a 20 	lds	r25, 0x209A
 452:	9c 01       	movw	r18, r24
 454:	21 5d       	subi	r18, 0xD1	; 209
 456:	37 40       	sbci	r19, 0x07	; 7
 458:	2f 32       	cpi	r18, 0x2F	; 47
 45a:	38 40       	sbci	r19, 0x08	; 8
 45c:	c8 f4       	brcc	.+50     	; 0x490 <SetPulseWidths+0x46>
	
	
	throttleAxis.attitude_command * SCALE_THROTTLE + pitchAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE + rollAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE - pitchAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE - rollAxis.attitude_pid_out
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	60 91 3d 20 	lds	r22, 0x203D
 46a:	70 91 3e 20 	lds	r23, 0x203E
	//throttleAxis.attitude_command * SCALE_THROTTLE - rollAxis.rate_pid_out
	
	
	throttleAxis.attitude_command * SCALE_THROTTLE + pitchAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE + rollAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE - pitchAxis.attitude_pid_out,
 46e:	e0 91 6d 20 	lds	r30, 0x206D
 472:	f0 91 6e 20 	lds	r31, 0x206E
	throttleAxis.attitude_command * SCALE_THROTTLE - rollAxis.attitude_pid_out
 476:	9c 01       	movw	r18, r24
 478:	26 1b       	sub	r18, r22
 47a:	37 0b       	sbc	r19, r23
	//throttleAxis.attitude_command * SCALE_THROTTLE - rollAxis.rate_pid_out
	
	
	throttleAxis.attitude_command * SCALE_THROTTLE + pitchAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE + rollAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE - pitchAxis.attitude_pid_out,
 47c:	ac 01       	movw	r20, r24
 47e:	4e 1b       	sub	r20, r30
 480:	5f 0b       	sbc	r21, r31
	//throttleAxis.attitude_command * SCALE_THROTTLE - pitchAxis.rate_pid_out,
	//throttleAxis.attitude_command * SCALE_THROTTLE - rollAxis.rate_pid_out
	
	
	throttleAxis.attitude_command * SCALE_THROTTLE + pitchAxis.attitude_pid_out,
	throttleAxis.attitude_command * SCALE_THROTTLE + rollAxis.attitude_pid_out,
 482:	68 0f       	add	r22, r24
 484:	79 1f       	adc	r23, r25
void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.attitude_command > 2000 && throttleAxis.attitude_command <= 4095)
	{
	doPWM(
 486:	8e 0f       	add	r24, r30
 488:	9f 1f       	adc	r25, r31
 48a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <doPWM>
 48e:	08 95       	ret
	//throttleAxis.command * SCALE_THROTTLE - rollAxis.error);
	}
	//}
	else
	{
	doPWM(0,0,0,0);
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <doPWM>
 4a4:	08 95       	ret

000004a6 <getCommand>:
void getCommand()
{

	int i;
	
	if (Rx_Buf[0] == 0xFF && Rx_Buf[1] == 0xFD)
 4a6:	80 91 0e 20 	lds	r24, 0x200E
 4aa:	8f 3f       	cpi	r24, 0xFF	; 255
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <getCommand+0xa>
 4ae:	75 c0       	rjmp	.+234    	; 0x59a <getCommand+0xf4>
 4b0:	80 91 0f 20 	lds	r24, 0x200F
 4b4:	8d 3f       	cpi	r24, 0xFD	; 253
 4b6:	09 f0       	breq	.+2      	; 0x4ba <getCommand+0x14>
 4b8:	70 c0       	rjmp	.+224    	; 0x59a <getCommand+0xf4>
	{
		i =	2;

		throttleAxis.attitude_command =(throttleAxis.attitude_command << 8 ) + Rx_Buf[i++];
 4ba:	e9 e9       	ldi	r30, 0x99	; 153
 4bc:	f0 e2       	ldi	r31, 0x20	; 32
 4be:	90 81       	ld	r25, Z
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	20 91 10 20 	lds	r18, 0x2010
 4c6:	82 0f       	add	r24, r18
 4c8:	91 1d       	adc	r25, r1
		throttleAxis.attitude_command =(throttleAxis.attitude_command << 8 ) + Rx_Buf[i++];
 4ca:	98 2f       	mov	r25, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	20 91 11 20 	lds	r18, 0x2011
 4d2:	82 0f       	add	r24, r18
 4d4:	91 1d       	adc	r25, r1
 4d6:	80 83       	st	Z, r24
 4d8:	91 83       	std	Z+1, r25	; 0x01
		
		yawAxis.attitude_command = (yawAxis.attitude_command << 8 ) + Rx_Buf[i++];
 4da:	ef ec       	ldi	r30, 0xCF	; 207
 4dc:	f0 e2       	ldi	r31, 0x20	; 32
 4de:	90 81       	ld	r25, Z
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	20 91 12 20 	lds	r18, 0x2012
 4e6:	82 0f       	add	r24, r18
 4e8:	91 1d       	adc	r25, r1
		yawAxis.attitude_command =(yawAxis.attitude_command << 8 ) + Rx_Buf[i++];
 4ea:	98 2f       	mov	r25, r24
 4ec:	88 27       	eor	r24, r24
 4ee:	20 91 13 20 	lds	r18, 0x2013
 4f2:	82 0f       	add	r24, r18
 4f4:	91 1d       	adc	r25, r1
 4f6:	80 83       	st	Z, r24
 4f8:	91 83       	std	Z+1, r25	; 0x01
		
		pitchAxis.attitude_command = (pitchAxis.attitude_command << 8 ) + Rx_Buf[i++];
 4fa:	eb e6       	ldi	r30, 0x6B	; 107
 4fc:	f0 e2       	ldi	r31, 0x20	; 32
 4fe:	90 81       	ld	r25, Z
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	20 91 14 20 	lds	r18, 0x2014
 506:	82 0f       	add	r24, r18
 508:	91 1d       	adc	r25, r1
		pitchAxis.attitude_command =(pitchAxis.attitude_command << 8 ) + Rx_Buf[i++];
 50a:	98 2f       	mov	r25, r24
 50c:	88 27       	eor	r24, r24
 50e:	20 91 15 20 	lds	r18, 0x2015
 512:	82 0f       	add	r24, r18
 514:	91 1d       	adc	r25, r1
 516:	80 83       	st	Z, r24
 518:	91 83       	std	Z+1, r25	; 0x01
			
		rollAxis.attitude_command = (rollAxis.attitude_command << 8 ) + Rx_Buf[i++];
 51a:	eb e3       	ldi	r30, 0x3B	; 59
 51c:	f0 e2       	ldi	r31, 0x20	; 32
 51e:	90 81       	ld	r25, Z
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	20 91 16 20 	lds	r18, 0x2016
 526:	82 0f       	add	r24, r18
 528:	91 1d       	adc	r25, r1
		rollAxis.attitude_command =(rollAxis.attitude_command << 8 ) + Rx_Buf[i++];
 52a:	98 2f       	mov	r25, r24
 52c:	88 27       	eor	r24, r24
 52e:	20 91 17 20 	lds	r18, 0x2017
 532:	82 0f       	add	r24, r18
 534:	91 1d       	adc	r25, r1
 536:	80 83       	st	Z, r24
 538:	91 83       	std	Z+1, r25	; 0x01
		//rollAxis.Ki_rate =(rollAxis.Ki_rate << 8 ) + Rx_Buf[i++];
		//
		//rollAxis.Kd_rate = (rollAxis.Kd_rate << 8 ) + Rx_Buf[i++];
		//rollAxis.Kd_rate =(rollAxis.Kd_rate << 8 ) + Rx_Buf[i++];

		rollAxis.Kp = (rollAxis.Kp  << 8 ) + Rx_Buf[i++];
 53a:	e1 e3       	ldi	r30, 0x31	; 49
 53c:	f0 e2       	ldi	r31, 0x20	; 32
 53e:	90 81       	ld	r25, Z
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	20 91 18 20 	lds	r18, 0x2018
 546:	82 0f       	add	r24, r18
 548:	91 1d       	adc	r25, r1
		rollAxis.Kp  =(rollAxis.Kp  << 8 ) + Rx_Buf[i++];
 54a:	98 2f       	mov	r25, r24
 54c:	88 27       	eor	r24, r24
 54e:	20 91 19 20 	lds	r18, 0x2019
 552:	82 0f       	add	r24, r18
 554:	91 1d       	adc	r25, r1
 556:	80 83       	st	Z, r24
 558:	91 83       	std	Z+1, r25	; 0x01
		
		rollAxis.Ki = (rollAxis.Ki << 8 ) + Rx_Buf[i++];
 55a:	e3 e3       	ldi	r30, 0x33	; 51
 55c:	f0 e2       	ldi	r31, 0x20	; 32
 55e:	90 81       	ld	r25, Z
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	20 91 1a 20 	lds	r18, 0x201A
 566:	82 0f       	add	r24, r18
 568:	91 1d       	adc	r25, r1
		rollAxis.Ki =(rollAxis.Ki << 8 ) + Rx_Buf[i++];
 56a:	98 2f       	mov	r25, r24
 56c:	88 27       	eor	r24, r24
 56e:	20 91 1b 20 	lds	r18, 0x201B
 572:	82 0f       	add	r24, r18
 574:	91 1d       	adc	r25, r1
 576:	80 83       	st	Z, r24
 578:	91 83       	std	Z+1, r25	; 0x01
		
		rollAxis.Kd = (rollAxis.Kd << 8 ) + Rx_Buf[i++];
 57a:	e5 e3       	ldi	r30, 0x35	; 53
 57c:	f0 e2       	ldi	r31, 0x20	; 32
 57e:	90 81       	ld	r25, Z
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	20 91 1c 20 	lds	r18, 0x201C
 586:	82 0f       	add	r24, r18
 588:	91 1d       	adc	r25, r1
		rollAxis.Kd =(rollAxis.Kd << 8 ) + Rx_Buf[i++];
 58a:	98 2f       	mov	r25, r24
 58c:	88 27       	eor	r24, r24
 58e:	20 91 1d 20 	lds	r18, 0x201D
 592:	82 0f       	add	r24, r18
 594:	91 1d       	adc	r25, r1
 596:	80 83       	st	Z, r24
 598:	91 83       	std	Z+1, r25	; 0x01
 59a:	08 95       	ret

0000059c <UpdateEulerAngles>:

	
	//this data is read in from the IMU on the SPI buss
	
	void UpdateEulerAngles()
	{
 59c:	df 92       	push	r13
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
		
		PORTF.OUTCLR = PIN4_bm;
 5aa:	0f 2e       	mov	r0, r31
 5ac:	f0 ea       	ldi	r31, 0xA0	; 160
 5ae:	ef 2e       	mov	r14, r31
 5b0:	f6 e0       	ldi	r31, 0x06	; 6
 5b2:	ff 2e       	mov	r15, r31
 5b4:	f0 2d       	mov	r31, r0
 5b6:	68 94       	set
 5b8:	dd 24       	eor	r13, r13
 5ba:	d4 f8       	bld	r13, 4
 5bc:	f7 01       	movw	r30, r14
 5be:	d6 82       	std	Z+6, r13	; 0x06

		uint8_t dummy_read;
		//psi = yaw  phi = roll    theta = pitch
		dummy_read = spi_write_read(READ_COMMAND);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
		dummy_read = spi_write_read(UM6_EULER_PHI_THETA);
 5c6:	82 e6       	ldi	r24, 0x62	; 98
 5c8:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>

		//MSB first
		rollAxis.attitude_feedback =(rollAxis.attitude_feedback << 8 ) +  spi_write_read(DUMMY_READ);
 5cc:	c7 e3       	ldi	r28, 0x37	; 55
 5ce:	d0 e2       	ldi	r29, 0x20	; 32
 5d0:	18 81       	ld	r17, Y
 5d2:	00 e0       	ldi	r16, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 5da:	08 0f       	add	r16, r24
 5dc:	11 1d       	adc	r17, r1
 5de:	08 83       	st	Y, r16
 5e0:	19 83       	std	Y+1, r17	; 0x01
		rollAxis.attitude_feedback =(rollAxis.attitude_feedback << 8 ) +  spi_write_read(DUMMY_READ);
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 5e8:	10 2f       	mov	r17, r16
 5ea:	00 27       	eor	r16, r16
 5ec:	08 0f       	add	r16, r24
 5ee:	11 1d       	adc	r17, r1
 5f0:	08 83       	st	Y, r16
 5f2:	19 83       	std	Y+1, r17	; 0x01
		
		pitchAxis.attitude_feedback =(pitchAxis.attitude_feedback << 8 ) +  spi_write_read(DUMMY_READ);
 5f4:	c7 e6       	ldi	r28, 0x67	; 103
 5f6:	d0 e2       	ldi	r29, 0x20	; 32
 5f8:	18 81       	ld	r17, Y
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 602:	08 0f       	add	r16, r24
 604:	11 1d       	adc	r17, r1
 606:	08 83       	st	Y, r16
 608:	19 83       	std	Y+1, r17	; 0x01
		pitchAxis.attitude_feedback =(pitchAxis.attitude_feedback << 8 ) +  spi_write_read(UM6_EULER_PSI);
 60a:	83 e6       	ldi	r24, 0x63	; 99
 60c:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 610:	10 2f       	mov	r17, r16
 612:	00 27       	eor	r16, r16
 614:	08 0f       	add	r16, r24
 616:	11 1d       	adc	r17, r1
 618:	08 83       	st	Y, r16
 61a:	19 83       	std	Y+1, r17	; 0x01
		
		yawAxis.attitude_feedback =(yawAxis.attitude_feedback << 8 ) +  spi_write_read(DUMMY_READ);
 61c:	cb ec       	ldi	r28, 0xCB	; 203
 61e:	d0 e2       	ldi	r29, 0x20	; 32
 620:	18 81       	ld	r17, Y
 622:	00 e0       	ldi	r16, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 62a:	08 0f       	add	r16, r24
 62c:	11 1d       	adc	r17, r1
 62e:	08 83       	st	Y, r16
 630:	19 83       	std	Y+1, r17	; 0x01
		yawAxis.attitude_feedback =(yawAxis.attitude_feedback << 8 ) +  spi_write_read(DUMMY_READ);
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
 638:	10 2f       	mov	r17, r16
 63a:	00 27       	eor	r16, r16
 63c:	08 0f       	add	r16, r24
 63e:	11 1d       	adc	r17, r1
 640:	08 83       	st	Y, r16
 642:	19 83       	std	Y+1, r17	; 0x01
		
		dummy_read = spi_write_read(DUMMY_READ);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>
		dummy_read =  spi_write_read(DUMMY_READ);
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 9a 01 	call	0x334	; 0x334 <spi_write_read>

		PORTF.OUTSET = PIN4_bm;
 650:	f7 01       	movw	r30, r14
 652:	d5 82       	std	Z+5, r13	; 0x05
		
		
		
		
	}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	df 90       	pop	r13
 662:	08 95       	ret

00000664 <Get_DMA_DATA>:
}



void Get_DMA_DATA( volatile DMA_CH_t * channel )
{
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	ec 01       	movw	r28, r24
	uint8_t flagMask;
	uint8_t relevantFlags;

	flagMask = DMA_CH_ERRIF_bm | DMA_CH_TRNIF_bm;
	relevantFlags = channel->CTRLB & flagMask;
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	80 73       	andi	r24, 0x30	; 48

	if (relevantFlags != 0x00)
 66e:	21 f0       	breq	.+8      	; 0x678 <Get_DMA_DATA+0x14>
	{
		getCommand();
 670:	0e 94 53 02 	call	0x4a6	; 0x4a6 <getCommand>
		channel->CTRLB = flagMask;
 674:	80 e3       	ldi	r24, 0x30	; 48
 676:	89 83       	std	Y+1, r24	; 0x01
	}

}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 67e:	e0 eb       	ldi	r30, 0xB0	; 176
 680:	f9 e0       	ldi	r31, 0x09	; 9
 682:	91 81       	ldd	r25, Z+1	; 0x01
 684:	95 ff       	sbrs	r25, 5
 686:	fd cf       	rjmp	.-6      	; 0x682 <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 688:	80 93 b0 09 	sts	0x09B0, r24
 68c:	08 95       	ret

0000068e <sendData_int16_t>:
	}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 68e:	cf 93       	push	r28
 690:	c8 2f       	mov	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 692:	89 2f       	mov	r24, r25
 694:	0e 94 3f 03 	call	0x67e	; 0x67e <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 698:	8c 2f       	mov	r24, r28
 69a:	0e 94 3f 03 	call	0x67e	; 0x67e <put_USART_PC_char>
}
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <sendUM6_Data>:
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
}

void sendUM6_Data()
{
	sendData_int16_t(0xFFFE);
 6a2:	8e ef       	ldi	r24, 0xFE	; 254
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(yawAxis.attitude_feedback);
 6aa:	80 91 cb 20 	lds	r24, 0x20CB
 6ae:	90 91 cc 20 	lds	r25, 0x20CC
 6b2:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(pitchAxis.attitude_feedback);
 6b6:	80 91 67 20 	lds	r24, 0x2067
 6ba:	90 91 68 20 	lds	r25, 0x2068
 6be:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(rollAxis.attitude_feedback);
 6c2:	80 91 37 20 	lds	r24, 0x2037
 6c6:	90 91 38 20 	lds	r25, 0x2038
 6ca:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(rollAxis.attitude_pid_out);
 6ce:	80 91 3d 20 	lds	r24, 0x203D
 6d2:	90 91 3e 20 	lds	r25, 0x203E
 6d6:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(rollAxis.attitude_error);
 6da:	80 91 41 20 	lds	r24, 0x2041
 6de:	90 91 42 20 	lds	r25, 0x2042
 6e2:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
	sendData_int16_t(rollAxis.attitude_command);
 6e6:	80 91 3b 20 	lds	r24, 0x203B
 6ea:	90 91 3c 20 	lds	r25, 0x203C
 6ee:	0e 94 47 03 	call	0x68e	; 0x68e <sendData_int16_t>
 6f2:	08 95       	ret

000006f4 <init32MHzClock>:

void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 6f4:	e0 e5       	ldi	r30, 0x50	; 80
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	82 60       	ori	r24, 0x02	; 2
 6fc:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 6fe:	81 81       	ldd	r24, Z+1	; 0x01
 700:	81 ff       	sbrs	r24, 1
 702:	fd cf       	rjmp	.-6      	; 0x6fe <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 704:	88 ed       	ldi	r24, 0xD8	; 216
 706:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	80 93 40 00 	sts	0x0040, r24
 70e:	08 95       	ret

00000710 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 710:	e0 e6       	ldi	r30, 0x60	; 96
 712:	f6 e0       	ldi	r31, 0x06	; 6
 714:	90 e4       	ldi	r25, 0x40	; 64
 716:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1	
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 71c:	e0 e4       	ldi	r30, 0x40	; 64
 71e:	f6 e0       	ldi	r31, 0x06	; 6
 720:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 722:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 724:	e0 eb       	ldi	r30, 0xB0	; 176
 726:	f9 e0       	ldi	r31, 0x09	; 9
 728:	8b e0       	ldi	r24, 0x0B	; 11
 72a:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 72c:	87 e1       	ldi	r24, 0x17	; 23
 72e:	86 83       	std	Z+6, r24	; 0x06
 730:	84 ea       	ldi	r24, 0xA4	; 164
 732:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 734:	84 81       	ldd	r24, Z+4	; 0x04
 736:	80 61       	ori	r24, 0x10	; 16
 738:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 73a:	84 81       	ldd	r24, Z+4	; 0x04
 73c:	88 60       	ori	r24, 0x08	; 8
 73e:	84 83       	std	Z+4, r24	; 0x04
 740:	08 95       	ret

00000742 <intPID_gains>:


void intPID_gains()
{

	yawAxis.Kp = 0;
 742:	10 92 c5 20 	sts	0x20C5, r1
 746:	10 92 c6 20 	sts	0x20C6, r1
	yawAxis.Ki = 0;
 74a:	10 92 c7 20 	sts	0x20C7, r1
 74e:	10 92 c8 20 	sts	0x20C8, r1
	yawAxis.Kd = 0;
 752:	10 92 c9 20 	sts	0x20C9, r1
 756:	10 92 ca 20 	sts	0x20CA, r1
	
	pitchAxis.Kp = 100;
 75a:	84 e6       	ldi	r24, 0x64	; 100
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	80 93 61 20 	sts	0x2061, r24
 762:	90 93 62 20 	sts	0x2062, r25
	pitchAxis.Ki = 100;
 766:	80 93 63 20 	sts	0x2063, r24
 76a:	90 93 64 20 	sts	0x2064, r25
	pitchAxis.Kd = 100;
 76e:	80 93 65 20 	sts	0x2065, r24
 772:	90 93 66 20 	sts	0x2066, r25
	
	rollAxis.Kp = 0;
 776:	10 92 31 20 	sts	0x2031, r1
 77a:	10 92 32 20 	sts	0x2032, r1
	rollAxis.Ki =0;
 77e:	10 92 33 20 	sts	0x2033, r1
 782:	10 92 34 20 	sts	0x2034, r1
	rollAxis.Kd =0;
 786:	10 92 35 20 	sts	0x2035, r1
 78a:	10 92 36 20 	sts	0x2036, r1
	
	rollAxis.Kp_rate = 100;
 78e:	80 93 2b 20 	sts	0x202B, r24
 792:	90 93 2c 20 	sts	0x202C, r25
	rollAxis.Ki_rate =100;
 796:	80 93 2d 20 	sts	0x202D, r24
 79a:	90 93 2e 20 	sts	0x202E, r25
	rollAxis.Kd_rate =100;
 79e:	80 93 2f 20 	sts	0x202F, r24
 7a2:	90 93 30 20 	sts	0x2030, r25
 7a6:	08 95       	ret

000007a8 <Setup_DMA_ReceiveChannel>:
 *  \param  useRepeat      True if repeat should be used, false if not.
 */


void Setup_DMA_ReceiveChannel( void )
{
 7a8:	8f 92       	push	r8
 7aa:	af 92       	push	r10
 7ac:	bf 92       	push	r11
 7ae:	cf 92       	push	r12
 7b0:	ef 92       	push	r14
 7b2:	0f 93       	push	r16
 7b4:	1f 93       	push	r17
	DMA_SetupBlock(  DMA_RX_Channel,(void *) &USARTD1.DATA, DMA_CH_SRCRELOAD_NONE_gc,  DMA_CH_SRCDIR_FIXED_gc, Rx_Buf,
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	8f 93       	push	r24
 7ba:	1f 92       	push	r1
 7bc:	81 2c       	mov	r8, r1
 7be:	68 94       	set
 7c0:	aa 24       	eor	r10, r10
 7c2:	a4 f8       	bld	r10, 4
 7c4:	b1 2c       	mov	r11, r1
 7c6:	cc 24       	eor	r12, r12
 7c8:	c3 94       	inc	r12
 7ca:	68 94       	set
 7cc:	ee 24       	eor	r14, r14
 7ce:	e2 f8       	bld	r14, 2
 7d0:	0e e0       	ldi	r16, 0x0E	; 14
 7d2:	10 e2       	ldi	r17, 0x20	; 32
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	60 eb       	ldi	r22, 0xB0	; 176
 7da:	79 e0       	ldi	r23, 0x09	; 9
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	0e 94 ef 01 	call	0x3de	; 0x3de <DMA_SetupBlock>
	DMA_CH_DESTRELOAD_BLOCK_gc, DMA_CH_DESTDIR_INC_gc, NUM_CMD_BYTES, DMA_CH_BURSTLEN_1BYTE_gc,  0x00, true);
	
	DMA_EnableSingleShot(DMA_RX_Channel);
 7e4:	80 e2       	ldi	r24, 0x20	; 32
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 1d 02 	call	0x43a	; 0x43a <DMA_EnableSingleShot>
	
	// USART Trigger source, Receive complete
	DMA_SetTriggerSource(DMA_RX_Channel, DMA_CH_TRIGSRC_USARTD1_RXC_gc);
 7ec:	6e e6       	ldi	r22, 0x6E	; 110
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 22 02 	call	0x444	; 0x444 <DMA_SetTriggerSource>
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
	
}
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ef 90       	pop	r14
 800:	cf 90       	pop	r12
 802:	bf 90       	pop	r11
 804:	af 90       	pop	r10
 806:	8f 90       	pop	r8
 808:	08 95       	ret

0000080a <main>:


int main(void)
{

	PORTA.DIRSET = 0xFF;			//  LEDS
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	f6 e0       	ldi	r31, 0x06	; 6
 810:	81 83       	std	Z+1, r24	; 0x01
	init32MHzClock();
 812:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <init32MHzClock>
	initUART();
 816:	0e 94 88 03 	call	0x710	; 0x710 <initUART>
    spi_set_up();intPID_gains();
 81a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <spi_set_up>
 81e:	0e 94 a1 03 	call	0x742	; 0x742 <intPID_gains>
    initPWM();
 822:	0e 94 aa 01 	call	0x354	; 0x354 <initPWM>
    init32MHzClock();
 826:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <init32MHzClock>
    initUART();
 82a:	0e 94 88 03 	call	0x710	; 0x710 <initUART>
    //Initialize DMAC
    DMA_Enable();
 82e:	e0 e0       	ldi	r30, 0x00	; 0
 830:	f1 e0       	ldi	r31, 0x01	; 1
 832:	80 81       	ld	r24, Z
 834:	80 68       	ori	r24, 0x80	; 128
 836:	80 83       	st	Z, r24
    Setup_DMA_ReceiveChannel();
 838:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Setup_DMA_ReceiveChannel>
    //The receiving DMA channel will wait for characters
    //and write them to Rx_Buf
    DMA_EnableChannel(DMA_RX_Channel);
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DMA_EnableChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 844:	8f e7       	ldi	r24, 0x7F	; 127
 846:	9e e3       	ldi	r25, 0x3E	; 62
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <main+0x3e>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <main+0x44>
 84e:	00 00       	nop
		{
		
			_delay_ms(2);

	
			UpdateEulerAngles(&rollAxis,&pitchAxis,&yawAxis);
 850:	4f eb       	ldi	r20, 0xBF	; 191
 852:	50 e2       	ldi	r21, 0x20	; 32
 854:	6b e5       	ldi	r22, 0x5B	; 91
 856:	70 e2       	ldi	r23, 0x20	; 32
 858:	8b e2       	ldi	r24, 0x2B	; 43
 85a:	90 e2       	ldi	r25, 0x20	; 32
 85c:	0e 94 ce 02 	call	0x59c	; 0x59c <UpdateEulerAngles>

			//PORTA.OUTTGL = 0xFF;			//  LEDS
			Get_DMA_DATA(DMA_RX_Channel);
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	91 e0       	ldi	r25, 0x01	; 1
 864:	0e 94 32 03 	call	0x664	; 0x664 <Get_DMA_DATA>
			pid_attitude(&rollAxis);
 868:	8b e2       	ldi	r24, 0x2B	; 43
 86a:	90 e2       	ldi	r25, 0x20	; 32
 86c:	0e 94 22 01 	call	0x244	; 0x244 <pid_attitude>
			SetPulseWidths();
 870:	0e 94 25 02 	call	0x44a	; 0x44a <SetPulseWidths>
			int16counter++;
 874:	80 91 ed 20 	lds	r24, 0x20ED
 878:	90 91 ee 20 	lds	r25, 0x20EE
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	80 93 ed 20 	sts	0x20ED, r24
 882:	90 93 ee 20 	sts	0x20EE, r25
			if (int16counter >= 10)
 886:	0a 97       	sbiw	r24, 0x0a	; 10
 888:	ec f2       	brlt	.-70     	; 0x844 <main+0x3a>
			{
					sendUM6_Data();
 88a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sendUM6_Data>
					int16counter = 0;
 88e:	10 92 ed 20 	sts	0x20ED, r1
 892:	10 92 ee 20 	sts	0x20EE, r1
 896:	d6 cf       	rjmp	.-84     	; 0x844 <main+0x3a>

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
