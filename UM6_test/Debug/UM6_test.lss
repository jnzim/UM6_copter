
UM6_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  00000756  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000105  0080200a  0080200a  000007f4  2**0
                  ALLOC
  3 .stab         0000075c  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000129  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001079  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a12  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000515  00000000  00000000  00004d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bd3  00000000  00000000  000052a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c0  00000000  00000000  00005e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028a4  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c2d  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b0  00000000  00000000  0000ab0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_77>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 e5       	ldi	r30, 0x56	; 86
 214:	f7 e0       	ldi	r31, 0x07	; 7
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 30       	cpi	r26, 0x0A	; 10
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	aa e0       	ldi	r26, 0x0A	; 10
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	af 30       	cpi	r26, 0x0F	; 15
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 45 03 	call	0x68a	; 0x68a <main>
 23c:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <SPI_MasterInit>:
		acc = Uint16_MAX;
		errno = ERANGE;
	} else if (neg)
	acc = -acc;
	if (endptr != 0)
	*endptr = (char *) (any ? s - 1 : nptr);
 244:	af 92       	push	r10
 246:	cf 92       	push	r12
 248:	ef 92       	push	r14
 24a:	0f 93       	push	r16
 24c:	fc 01       	movw	r30, r24
 24e:	60 83       	st	Z, r22
 250:	71 83       	std	Z+1, r23	; 0x01
 252:	42 83       	std	Z+2, r20	; 0x02
 254:	53 83       	std	Z+3, r21	; 0x03
	return (acc);
 256:	14 82       	std	Z+4, r1	; 0x04
 258:	cc 20       	and	r12, r12
 25a:	11 f0       	breq	.+4      	; 0x260 <SPI_MasterInit+0x1c>
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
	c = *s++;
	if ((base == 0 || base == 16) &&
 25c:	90 e8       	ldi	r25, 0x80	; 128
 25e:	01 c0       	rjmp	.+2      	; 0x262 <SPI_MasterInit+0x1e>
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	22 23       	and	r18, r18
 264:	11 f0       	breq	.+4      	; 0x26a <SPI_MasterInit+0x26>
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	01 c0       	rjmp	.+2      	; 0x26c <SPI_MasterInit+0x28>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	00 65       	ori	r16, 0x50	; 80
 26e:	0a 29       	or	r16, r10
 270:	09 2b       	or	r16, r25
 272:	08 2b       	or	r16, r24
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
	base = c == '0' ? 8 : 10;
 274:	db 01       	movw	r26, r22
 276:	0c 93       	st	X, r16
 278:	a0 81       	ld	r26, Z
 27a:	b1 81       	ldd	r27, Z+1	; 0x01
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	ec 92       	st	X, r14
	} else if (neg)
	acc = -acc;
	if (endptr != 0)
	*endptr = (char *) (any ? s - 1 : nptr);
	return (acc);
}
 280:	15 82       	std	Z+5, r1	; 0x05
 282:	16 82       	std	Z+6, r1	; 0x06
 284:	02 80       	ldd	r0, Z+2	; 0x02
 286:	f3 81       	ldd	r31, Z+3	; 0x03
 288:	e0 2d       	mov	r30, r0
 28a:	80 ea       	ldi	r24, 0xA0	; 160
 28c:	81 83       	std	Z+1, r24	; 0x01
 28e:	0f 91       	pop	r16
 290:	ef 90       	pop	r14
 292:	cf 90       	pop	r12
 294:	af 90       	pop	r10
 296:	08 95       	ret

00000298 <spi_set_up>:
 298:	af 92       	push	r10
 29a:	cf 92       	push	r12
 29c:	ef 92       	push	r14
 29e:	0f 93       	push	r16
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	e0 ea       	ldi	r30, 0xA0	; 160
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	c0 e1       	ldi	r28, 0x10	; 16
 2aa:	c1 83       	std	Z+1, r28	; 0x01
{
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 2ac:	d8 e3       	ldi	r29, 0x38	; 56
 2ae:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 2b0:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 2b2:	68 94       	set
 2b4:	aa 24       	eor	r10, r10
 2b6:	a1 f8       	bld	r10, 1
 2b8:	c1 2c       	mov	r12, r1
 2ba:	e1 2c       	mov	r14, r1
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	40 ea       	ldi	r20, 0xA0	; 160
 2c2:	56 e0       	ldi	r21, 0x06	; 6
 2c4:	60 ec       	ldi	r22, 0xC0	; 192
 2c6:	7b e0       	ldi	r23, 0x0B	; 11
 2c8:	8e e0       	ldi	r24, 0x0E	; 14
 2ca:	90 e2       	ldi	r25, 0x20	; 32
 2cc:	0e 94 22 01 	call	0x244	; 0x244 <SPI_MasterInit>
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	f6 e0       	ldi	r31, 0x06	; 6
 2d4:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 2d6:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 2d8:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	40 e8       	ldi	r20, 0x80	; 128
 2de:	56 e0       	ldi	r21, 0x06	; 6
 2e0:	60 ec       	ldi	r22, 0xC0	; 192
 2e2:	7a e0       	ldi	r23, 0x0A	; 10
 2e4:	80 ed       	ldi	r24, 0xD0	; 208
 2e6:	90 e2       	ldi	r25, 0x20	; 32
 2e8:	0e 94 22 01 	call	0x244	; 0x244 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	0f 91       	pop	r16
 2f2:	ef 90       	pop	r14
 2f4:	cf 90       	pop	r12
 2f6:	af 90       	pop	r10
 2f8:	08 95       	ret

000002fa <spi_write_read>:
// Load the register, this will start a transfer on MOSI
//  Wait until the intrupt flag is set
//  read the data from the data register, this was on MISO
unsigned char spi_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 2fa:	e0 ec       	ldi	r30, 0xC0	; 192
 2fc:	fb e0       	ldi	r31, 0x0B	; 11
 2fe:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	88 23       	and	r24, r24
 304:	ec f7       	brge	.-6      	; 0x300 <spi_write_read+0x6>
	return SPIF.DATA;
 306:	e0 ec       	ldi	r30, 0xC0	; 192
 308:	fb e0       	ldi	r31, 0x0B	; 11
 30a:	83 81       	ldd	r24, Z+3	; 0x03
}
 30c:	08 95       	ret

0000030e <spiPC_write_read>:
// Load the register, this will start a transfer on MOSI
//  Wait until the intrupt flag is set
//  read the data from the data register, this was on MISO
unsigned char spiPC_write_read(unsigned char spi_data)
{
	SPIE.DATA = spi_data;
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	fa e0       	ldi	r31, 0x0A	; 10
 312:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 314:	82 81       	ldd	r24, Z+2	; 0x02
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <spiPC_write_read+0x6>
	return SPIE.DATA;
 31a:	e0 ec       	ldi	r30, 0xC0	; 192
 31c:	fa e0       	ldi	r31, 0x0A	; 10
 31e:	83 81       	ldd	r24, Z+3	; 0x03
}
 320:	08 95       	ret

00000322 <ZeroGyros>:

void ZeroGyros()
{
	uint8_t dummy_read;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spi_write_read(WRITE_COMMAND);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
	dummy_read = spi_write_read(ZERO_GYROS);
 328:	8c ea       	ldi	r24, 0xAC	; 172
 32a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 32e:	08 95       	ret

00000330 <ZeroAccelerometers>:

void ZeroAccelerometers()
{
	uint8_t dummy_read;

	dummy_read = spi_write_read(WRITE_COMMAND);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
	dummy_read = spi_write_read(SET_ACCEL_REF);
 336:	8f ea       	ldi	r24, 0xAF	; 175
 338:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 33c:	08 95       	ret

0000033e <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 33e:	fc 01       	movw	r30, r24
 340:	20 81       	ld	r18, Z
 342:	20 7f       	andi	r18, 0xF0	; 240
 344:	62 2b       	or	r22, r18
 346:	60 83       	st	Z, r22
 348:	08 95       	ret

0000034a <initPWM>:
    //int16_t pwm_delta = 300;

    // Add code to select a Single Slope PWM as Waveform Generation mode. 
    // This is done by setting the WGM bits,in the CTRLB register for the TC.
	
	MOTOR_PMW_TIMER0.CTRLA = TC_WGMODE_SS_gc;
 34a:	e0 e0       	ldi	r30, 0x00	; 0
 34c:	f8 e0       	ldi	r31, 0x08	; 8
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	80 83       	st	Z, r24
	MOTOR_PMW_TIMER0.CTRLB = TC_WGMODE_SS_gc;
 352:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLC = TC_WGMODE_SS_gc;
 354:	82 83       	std	Z+2, r24	; 0x02
	MOTOR_PMW_TIMER0.CTRLD = TC_WGMODE_SS_gc;
 356:	83 83       	std	Z+3, r24	; 0x03

    /* Add code to enable the CC channels we wish to use. Each channel must be separately enabled
    * by setting the corresponding CCxEN bits in the CTRLB register for the TC.
    * Code for enabling CCA is already added, but add code to enable CCB, CCC and CCD */
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCAEN_bm;
 358:	81 81       	ldd	r24, Z+1	; 0x01
 35a:	80 61       	ori	r24, 0x10	; 16
 35c:	81 83       	std	Z+1, r24	; 0x01
    MOTOR_PMW_TIMER0.CTRLB |= TC0_CCBEN_bm;
 35e:	81 81       	ldd	r24, Z+1	; 0x01
 360:	80 62       	ori	r24, 0x20	; 32
 362:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCCEN_bm;
 364:	81 81       	ldd	r24, Z+1	; 0x01
 366:	80 64       	ori	r24, 0x40	; 64
 368:	81 83       	std	Z+1, r24	; 0x01
	MOTOR_PMW_TIMER0.CTRLB |= TC0_CCDEN_bm;
 36a:	81 81       	ldd	r24, Z+1	; 0x01
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	81 83       	std	Z+1, r24	; 0x01

    /* The corresponding port pins MUST be output for the Waveform to be visible
    * on the pin. For TCE0 the corresponding port is PORTE, and pin 0 to 3 for
    * CC channel A to D */

    MOTOR_PORT.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	a0 e4       	ldi	r26, 0x40	; 64
 374:	b6 e0       	ldi	r27, 0x06	; 6
 376:	11 96       	adiw	r26, 0x01	; 1
 378:	8c 93       	st	X, r24
    * The compare value decide the PWM duty cycle for the waveform.
    * 
    * Code for CC channel A is added, add code for channel B, C, and D
    * with the compare value 3000 */

    TC_SetCompareA(&MOTOR_PMW_TIMER0, 0);
 37a:	10 ae       	std	Z+56, r1	; 0x38
 37c:	11 ae       	std	Z+57, r1	; 0x39
	TC_SetCompareB(&MOTOR_PMW_TIMER0, 0);
 37e:	12 ae       	std	Z+58, r1	; 0x3a
 380:	13 ae       	std	Z+59, r1	; 0x3b
	TC_SetCompareC(&MOTOR_PMW_TIMER0, 0);
 382:	14 ae       	std	Z+60, r1	; 0x3c
 384:	15 ae       	std	Z+61, r1	; 0x3d
	TC_SetCompareD(&MOTOR_PMW_TIMER0, 0);
 386:	10 92 3e 08 	sts	0x083E, r1
 38a:	10 92 3f 08 	sts	0x083F, r1
    /* Using the TC_driver we set the Period and 
    * start the timer with  pre-scaling */
	// set PWM frequency at 300Hz with clock division = 4.  1/(300Hz / (32MHz /4)) - 1 = 26665      Period = 3.333 mSec
	 // 1mSec = 8000 = Off
	 // 2mSec =  = 15999 = ON
    TC_SetPeriod(&MOTOR_PMW_TIMER0, 26665);
 38e:	89 e2       	ldi	r24, 0x29	; 41
 390:	98 e6       	ldi	r25, 0x68	; 104
 392:	86 a3       	std	Z+38, r24	; 0x26
 394:	97 a3       	std	Z+39, r25	; 0x27
    TC0_ConfigClockSource(&MOTOR_PMW_TIMER0, TC_CLKSEL_DIV4_gc);
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	98 e0       	ldi	r25, 0x08	; 8
 39c:	0e 94 9f 01 	call	0x33e	; 0x33e <TC0_ConfigClockSource>
 3a0:	08 95       	ret

000003a2 <UpdateEulerAngles>:

	
	//this data is read in from the IMU on the SPI bus
	
void UpdateEulerAngles()
{
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 3aa:	c0 ea       	ldi	r28, 0xA0	; 160
 3ac:	d6 e0       	ldi	r29, 0x06	; 6
 3ae:	10 e1       	ldi	r17, 0x10	; 16
 3b0:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spi_write_read(READ_COMMAND);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
	dummy_read = spi_write_read(UM6_EULER_PHI_THETA);
 3b8:	82 e6       	ldi	r24, 0x62	; 98
 3ba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spi_write_read(DUMMY_READ)<< 8) | spi_write_read(DUMMY_READ);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 3c4:	08 2f       	mov	r16, r24
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 3cc:	30 2f       	mov	r19, r16
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	28 2b       	or	r18, r24
 3d2:	20 93 23 20 	sts	0x2023, r18
 3d6:	30 93 24 20 	sts	0x2024, r19

	pitchAxis.attitude_feedback = (spi_write_read(DUMMY_READ)<< 8) | spi_write_read(UM6_EULER_PSI);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 3e0:	08 2f       	mov	r16, r24
 3e2:	83 e6       	ldi	r24, 0x63	; 99
 3e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 3e8:	30 2f       	mov	r19, r16
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	28 2b       	or	r18, r24
 3ee:	20 93 56 20 	sts	0x2056, r18
 3f2:	30 93 57 20 	sts	0x2057, r19
	
	yawAxis.attitude_feedback = (spi_write_read(DUMMY_READ)<< 8) | spi_write_read(DUMMY_READ);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 3fc:	08 2f       	mov	r16, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
 404:	30 2f       	mov	r19, r16
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	28 2b       	or	r18, r24
 40a:	20 93 e5 20 	sts	0x20E5, r18
 40e:	30 93 e6 20 	sts	0x20E6, r19

	
	dummy_read = spi_write_read(DUMMY_READ);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>
	dummy_read =  spi_write_read(DUMMY_READ);
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_write_read>

	PORTF.OUTSET = PIN4_bm;
 41e:	1d 83       	std	Y+5, r17	; 0x05

}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <WriteToPC_SPI>:
		//
//}


void WriteToPC_SPI()
{
 42a:	8f 92       	push	r8
 42c:	9f 92       	push	r9
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 440:	0f 2e       	mov	r0, r31
 442:	f0 e8       	ldi	r31, 0x80	; 128
 444:	ef 2e       	mov	r14, r31
 446:	f6 e0       	ldi	r31, 0x06	; 6
 448:	ff 2e       	mov	r15, r31
 44a:	f0 2d       	mov	r31, r0
 44c:	68 94       	set
 44e:	dd 24       	eor	r13, r13
 450:	d4 f8       	bld	r13, 4
 452:	f7 01       	movw	r30, r14
 454:	d6 82       	std	Z+6, r13	; 0x06
	systemData.GPS_Lattitude = 0x00001000;
 456:	c8 eb       	ldi	r28, 0xB8	; 184
 458:	d0 e2       	ldi	r29, 0x20	; 32
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e1       	ldi	r25, 0x10	; 16
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	88 83       	st	Y, r24
 464:	99 83       	std	Y+1, r25	; 0x01
 466:	aa 83       	std	Y+2, r26	; 0x02
 468:	bb 83       	std	Y+3, r27	; 0x03
	uint8_t dummy_read;
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;
 46a:	0f 2e       	mov	r0, r31
 46c:	f8 ea       	ldi	r31, 0xA8	; 168
 46e:	af 2e       	mov	r10, r31
 470:	f0 e2       	ldi	r31, 0x20	; 32
 472:	bf 2e       	mov	r11, r31
 474:	f0 2d       	mov	r31, r0
 476:	f5 01       	movw	r30, r10
 478:	81 81       	ldd	r24, Z+1	; 0x01
 47a:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 47e:	18 2f       	mov	r17, r24
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	f5 01       	movw	r30, r10
 484:	00 83       	st	Z, r16
 486:	11 83       	std	Z+1, r17	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 48e:	08 0f       	add	r16, r24
 490:	11 1d       	adc	r17, r1
 492:	f5 01       	movw	r30, r10
 494:	00 83       	st	Z, r16
 496:	11 83       	std	Z+1, r17	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 498:	0f 2e       	mov	r0, r31
 49a:	f3 e2       	ldi	r31, 0x23	; 35
 49c:	8f 2e       	mov	r8, r31
 49e:	f0 e2       	ldi	r31, 0x20	; 32
 4a0:	9f 2e       	mov	r9, r31
 4a2:	f0 2d       	mov	r31, r0
 4a4:	f4 01       	movw	r30, r8
 4a6:	81 81       	ldd	r24, Z+1	; 0x01
 4a8:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 4ac:	18 2f       	mov	r17, r24
 4ae:	00 e0       	ldi	r16, 0x00	; 0
 4b0:	0f 2e       	mov	r0, r31
 4b2:	f7 e2       	ldi	r31, 0x27	; 39
 4b4:	af 2e       	mov	r10, r31
 4b6:	f0 e2       	ldi	r31, 0x20	; 32
 4b8:	bf 2e       	mov	r11, r31
 4ba:	f0 2d       	mov	r31, r0
 4bc:	f5 01       	movw	r30, r10
 4be:	00 83       	st	Z, r16
 4c0:	11 83       	std	Z+1, r17	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 4c2:	f4 01       	movw	r30, r8
 4c4:	80 81       	ld	r24, Z
 4c6:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 4ca:	08 0f       	add	r16, r24
 4cc:	11 1d       	adc	r17, r1
 4ce:	f5 01       	movw	r30, r10
 4d0:	00 83       	st	Z, r16
 4d2:	11 83       	std	Z+1, r17	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f6 e5       	ldi	r31, 0x56	; 86
 4d8:	8f 2e       	mov	r8, r31
 4da:	f0 e2       	ldi	r31, 0x20	; 32
 4dc:	9f 2e       	mov	r9, r31
 4de:	f0 2d       	mov	r31, r0
 4e0:	f4 01       	movw	r30, r8
 4e2:	81 81       	ldd	r24, Z+1	; 0x01
 4e4:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 4e8:	18 2f       	mov	r17, r24
 4ea:	00 e0       	ldi	r16, 0x00	; 0
 4ec:	0f 2e       	mov	r0, r31
 4ee:	fa e5       	ldi	r31, 0x5A	; 90
 4f0:	af 2e       	mov	r10, r31
 4f2:	f0 e2       	ldi	r31, 0x20	; 32
 4f4:	bf 2e       	mov	r11, r31
 4f6:	f0 2d       	mov	r31, r0
 4f8:	f5 01       	movw	r30, r10
 4fa:	00 83       	st	Z, r16
 4fc:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 4fe:	f4 01       	movw	r30, r8
 500:	80 81       	ld	r24, Z
 502:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 506:	08 0f       	add	r16, r24
 508:	11 1d       	adc	r17, r1
 50a:	f5 01       	movw	r30, r10
 50c:	00 83       	st	Z, r16
 50e:	11 83       	std	Z+1, r17	; 0x01
	
	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 510:	0f 2e       	mov	r0, r31
 512:	f5 ee       	ldi	r31, 0xE5	; 229
 514:	8f 2e       	mov	r8, r31
 516:	f0 e2       	ldi	r31, 0x20	; 32
 518:	9f 2e       	mov	r9, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	f4 01       	movw	r30, r8
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 524:	18 2f       	mov	r17, r24
 526:	00 e0       	ldi	r16, 0x00	; 0
 528:	0f 2e       	mov	r0, r31
 52a:	f9 ee       	ldi	r31, 0xE9	; 233
 52c:	af 2e       	mov	r10, r31
 52e:	f0 e2       	ldi	r31, 0x20	; 32
 530:	bf 2e       	mov	r11, r31
 532:	f0 2d       	mov	r31, r0
 534:	f5 01       	movw	r30, r10
 536:	00 83       	st	Z, r16
 538:	11 83       	std	Z+1, r17	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 53a:	f4 01       	movw	r30, r8
 53c:	80 81       	ld	r24, Z
 53e:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
 542:	08 0f       	add	r16, r24
 544:	11 1d       	adc	r17, r1
 546:	f5 01       	movw	r30, r10
 548:	00 83       	st	Z, r16
 54a:	11 83       	std	Z+1, r17	; 0x01

	
	dummy_read += spiPC_write_read(byte_4_32(systemData.GPS_Lattitude));
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	dummy_read += spiPC_write_read(byte_3_32(systemData.GPS_Lattitude));
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	dummy_read += spiPC_write_read(byte_2_32(systemData.GPS_Lattitude));
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	dummy_read += spiPC_write_read(byte_1_32(systemData.GPS_Lattitude));
 55e:	88 81       	ld	r24, Y
 560:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);
 564:	8c ec       	ldi	r24, 0xCC	; 204
 566:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	dummy_read = spiPC_write_read(END_PACKET_CHAR);
 56a:	8c ec       	ldi	r24, 0xCC	; 204
 56c:	0e 94 87 01 	call	0x30e	; 0x30e <spiPC_write_read>
	
	
	PORTE.OUTSET = PIN4_bm;
 570:	f7 01       	movw	r30, r14
 572:	d5 82       	std	Z+5, r13	; 0x05
	//PORTA.OUTTGL = 0x00000001;
	
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	bf 90       	pop	r11
 584:	af 90       	pop	r10
 586:	9f 90       	pop	r9
 588:	8f 90       	pop	r8
 58a:	08 95       	ret

0000058c <ControlLoop>:


//  runs on interrupt every 3.5mSec,250Hz
void ControlLoop()
{
	UpdateEulerAngles();
 58c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <UpdateEulerAngles>
	//pid_attitude(&rollAxis);
	//SetPulseWidths();
	int16counter++;
 590:	80 91 09 21 	lds	r24, 0x2109
 594:	90 91 0a 21 	lds	r25, 0x210A
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	80 93 09 21 	sts	0x2109, r24
 59e:	90 93 0a 21 	sts	0x210A, r25
	if (int16counter >= 7)						// 3.5*2 = 7
 5a2:	07 97       	sbiw	r24, 0x07	; 7
 5a4:	34 f0       	brlt	.+12     	; 0x5b2 <ControlLoop+0x26>
	{
		WriteToPC_SPI();
 5a6:	0e 94 15 02 	call	0x42a	; 0x42a <WriteToPC_SPI>
		//sendUM6_Data();
		int16counter = 0;
 5aa:	10 92 09 21 	sts	0x2109, r1
 5ae:	10 92 0a 21 	sts	0x210A, r1
 5b2:	08 95       	ret

000005b4 <init32MHzClock>:

void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 5b4:	e0 e5       	ldi	r30, 0x50	; 80
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 5be:	81 81       	ldd	r24, Z+1	; 0x01
 5c0:	81 ff       	sbrs	r24, 1
 5c2:	fd cf       	rjmp	.-6      	; 0x5be <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 5c4:	88 ed       	ldi	r24, 0xD8	; 216
 5c6:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	80 93 40 00 	sts	0x0040, r24
 5ce:	08 95       	ret

000005d0 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 5d0:	e0 e6       	ldi	r30, 0x60	; 96
 5d2:	f6 e0       	ldi	r31, 0x06	; 6
 5d4:	90 e4       	ldi	r25, 0x40	; 64
 5d6:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1	
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 5dc:	e0 e4       	ldi	r30, 0x40	; 64
 5de:	f6 e0       	ldi	r31, 0x06	; 6
 5e0:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 5e2:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 5e4:	e0 eb       	ldi	r30, 0xB0	; 176
 5e6:	f9 e0       	ldi	r31, 0x09	; 9
 5e8:	8b e0       	ldi	r24, 0x0B	; 11
 5ea:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 5ec:	87 e1       	ldi	r24, 0x17	; 23
 5ee:	86 83       	std	Z+6, r24	; 0x06
 5f0:	84 ea       	ldi	r24, 0xA4	; 164
 5f2:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 5f4:	84 81       	ldd	r24, Z+4	; 0x04
 5f6:	80 61       	ori	r24, 0x10	; 16
 5f8:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 5fa:	84 81       	ldd	r24, Z+4	; 0x04
 5fc:	88 60       	ori	r24, 0x08	; 8
 5fe:	84 83       	std	Z+4, r24	; 0x04
 600:	08 95       	ret

00000602 <intPID_gains>:


void intPID_gains()
{

	yawAxis.Kp = 0;
 602:	10 92 df 20 	sts	0x20DF, r1
 606:	10 92 e0 20 	sts	0x20E0, r1
	yawAxis.Ki = 0;
 60a:	10 92 e1 20 	sts	0x20E1, r1
 60e:	10 92 e2 20 	sts	0x20E2, r1
	yawAxis.Kd = 0;
 612:	10 92 e3 20 	sts	0x20E3, r1
 616:	10 92 e4 20 	sts	0x20E4, r1
	
	pitchAxis.Kp = 100;
 61a:	84 e6       	ldi	r24, 0x64	; 100
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	80 93 50 20 	sts	0x2050, r24
 622:	90 93 51 20 	sts	0x2051, r25
	pitchAxis.Ki = 100;
 626:	80 93 52 20 	sts	0x2052, r24
 62a:	90 93 53 20 	sts	0x2053, r25
	pitchAxis.Kd = 100;
 62e:	80 93 54 20 	sts	0x2054, r24
 632:	90 93 55 20 	sts	0x2055, r25
	
	rollAxis.Kp = 0;
 636:	10 92 1d 20 	sts	0x201D, r1
 63a:	10 92 1e 20 	sts	0x201E, r1
	rollAxis.Ki =0;
 63e:	10 92 1f 20 	sts	0x201F, r1
 642:	10 92 20 20 	sts	0x2020, r1
	rollAxis.Kd =0;
 646:	10 92 21 20 	sts	0x2021, r1
 64a:	10 92 22 20 	sts	0x2022, r1
	
	rollAxis.Kp_rate = 100;
 64e:	80 93 17 20 	sts	0x2017, r24
 652:	90 93 18 20 	sts	0x2018, r25
	rollAxis.Ki_rate =100;
 656:	80 93 19 20 	sts	0x2019, r24
 65a:	90 93 1a 20 	sts	0x201A, r25
	rollAxis.Kd_rate =100;
 65e:	80 93 1b 20 	sts	0x201B, r24
 662:	90 93 1c 20 	sts	0x201C, r25
 666:	08 95       	ret

00000668 <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer to run at the fastest rate. 
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 668:	e0 e0       	ldi	r30, 0x00	; 0
 66a:	f9 e0       	ldi	r31, 0x09	; 9
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 670:	11 82       	std	Z+1, r1	; 0x01

	// At 32 MHz/DIV_4 = 8Mhz,  65353 - (8,000,000 * .0035Sec) = 37535 
	TCD0.PER = 37535;
 672:	8f e9       	ldi	r24, 0x9F	; 159
 674:	92 e9       	ldi	r25, 0x92	; 146
 676:	86 a3       	std	Z+38, r24	; 0x26
 678:	97 a3       	std	Z+39, r25	; 0x27

	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 67e:	e0 ea       	ldi	r30, 0xA0	; 160
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	82 81       	ldd	r24, Z+2	; 0x02
 684:	81 60       	ori	r24, 0x01	; 1
 686:	82 83       	std	Z+2, r24	; 0x02
 688:	08 95       	ret

0000068a <main>:
}

int main(void)
{

	PORTA.DIRSET = 0xFF;			//  LEDS
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	e0 e0       	ldi	r30, 0x00	; 0
 68e:	f6 e0       	ldi	r31, 0x06	; 6
 690:	81 83       	std	Z+1, r24	; 0x01
	init32MHzClock();
 692:	0e 94 da 02 	call	0x5b4	; 0x5b4 <init32MHzClock>
	initUART();
 696:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <initUART>
    spi_set_up();
 69a:	0e 94 4c 01 	call	0x298	; 0x298 <spi_set_up>
	intPID_gains();
 69e:	0e 94 01 03 	call	0x602	; 0x602 <intPID_gains>
    initPWM();
 6a2:	0e 94 a5 01 	call	0x34a	; 0x34a <initPWM>
    initUART();
 6a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <initUART>
	 ZeroGyros();
 6aa:	0e 94 91 01 	call	0x322	; 0x322 <ZeroGyros>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	37 ea       	ldi	r19, 0xA7	; 167
 6b2:	81 e6       	ldi	r24, 0x61	; 97
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	30 40       	sbci	r19, 0x00	; 0
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x2a>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x34>
 6be:	00 00       	nop
	 _delay_ms(1000);
	 ZeroAccelerometers();
 6c0:	0e 94 98 01 	call	0x330	; 0x330 <ZeroAccelerometers>
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	23 e2       	ldi	r18, 0x23	; 35
 6c8:	34 ef       	ldi	r19, 0xF4	; 244
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	20 40       	sbci	r18, 0x00	; 0
 6d0:	30 40       	sbci	r19, 0x00	; 0
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	d9 f7       	brne	.-10     	; 0x6cc <main+0x42>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <main+0x4e>
 6d8:	00 00       	nop
    //DMA_Enable();
    //Setup_DMA_ReceiveChannel();
    //The receiving DMA channel will wait for characters
    //and write them to Rx_Buf
    //DMA_EnableChannel(DMA_RX_Channel);
	intiLoopTimer();
 6da:	0e 94 34 03 	call	0x668	; 0x668 <intiLoopTimer>
	 sei(); 
 6de:	78 94       	sei

		while(1)
		{
	
			nop();
 6e0:	00 00       	nop
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <main+0x56>

000006e4 <__vector_77>:
//2^16 = 65353  65536 -32000 = 33536

// switch  to clock divisor = 4, so  32Mhz / 250Hz = 32000 ticks  
/* Function to handle timer overflowing. */
ISR(TCD0_OVF_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	08 b6       	in	r0, 0x38	; 56
 6f0:	0f 92       	push	r0
 6f2:	18 be       	out	0x38, r1	; 56
 6f4:	09 b6       	in	r0, 0x39	; 57
 6f6:	0f 92       	push	r0
 6f8:	19 be       	out	0x39, r1	; 57
 6fa:	0b b6       	in	r0, 0x3b	; 59
 6fc:	0f 92       	push	r0
 6fe:	1b be       	out	0x3b, r1	; 59
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	ControlLoop();
 718:	0e 94 c6 02 	call	0x58c	; 0x58c <ControlLoop>
	TCD0.CNT = 0; 
 71c:	e0 e0       	ldi	r30, 0x00	; 0
 71e:	f9 e0       	ldi	r31, 0x09	; 9
 720:	10 a2       	std	Z+32, r1	; 0x20
 722:	11 a2       	std	Z+33, r1	; 0x21
	
}
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	7f 91       	pop	r23
 732:	6f 91       	pop	r22
 734:	5f 91       	pop	r21
 736:	4f 91       	pop	r20
 738:	3f 91       	pop	r19
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0b be       	out	0x3b, r0	; 59
 740:	0f 90       	pop	r0
 742:	09 be       	out	0x39, r0	; 57
 744:	0f 90       	pop	r0
 746:	08 be       	out	0x38, r0	; 56
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
